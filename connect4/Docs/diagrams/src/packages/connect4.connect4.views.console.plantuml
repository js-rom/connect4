@startuml connect4.connect4.console.console

class console.Consoleview

class console.StartView{
    +interact(StartController)
}

class console.PlayView{
    +interact(PlayController)
}

class console.ResumeView{
    +interact(ResumeController)
}

class console.BoardView{
    +writeln()
    +writeHorizontal()
}

class console.TurnView{
    +selectPlayers(StartController)
    +dropToken(PlayController)
    +writeResult(PlayController)
}

abstract class console.PlayerView{
    +getColumn(): int
    +dropToken()
    +setPlayer(Player player)
    +copy() : PlayerView
}

abstract class console.MachinePlayerView
class console.MinMaxMachinePlayerView
class console.RandomMachinePlayerView
class console.UserPlayerView
class console.TurnMenu{
    +TurnMenu(Startcontroller, int)
    +addOptions()
    +interact()
}

abstract class console.TurnOption{
    +SetUserPlayerOption(StartController)
}

class console.SetRandomMachinePlayerOption{
        +interact()
}

class console.SetMinMaxMachinePlayerOption{
        +interact()
}

class console.SetUserPlayerOption{
        +interact()
}

enum console.Message

class console.YesNoDialog

class console.PlayerViewPrototypeDirector <<Director>> {
    get(PlayerViewPrototypeRegistry, PlayerType) : PlayerView 
}

class console.PlayerViewPrototypeRegistry <<PrototypeRegistry>> {
    -playerViews : Map<PlayerType, PlayerView> 
    -addPlayerView(PlayerType, PlayerView)
    +getPlayerView(PlayerType) : PlayerView
}
class StartController as "controllers.StartController"
class PlayController as "controllers.PlayController"
class ResumeController as "controllers.ResumeController"

interface View as "views.View"{
    +start(StartController)
    +play(Playcoontroller)
    +resume(ResumeController)
}

interface ControllerVisitor as "controllers.ControllerVisitor" {
    +visit(StartController)
    +visit(PlayController)
    +visit(ResumeController)
}

View <|.. Consoleview 
ControllerVisitor <|.. Consoleview 
Consoleview *--> StartView
Consoleview *--> PlayView
Consoleview *--> ResumeView

StartView ..> StartController
PlayView ..> PlayController
ResumeView ..> ResumeController

StartView ..> TurnView

PlayView ..> TurnView
PlayView ..> BoardView

ResumeView ..> YesNoDialog

TurnView ..> PlayerView
TurnView ..> StartController
TurnView ..> PlayController
TurnView ..> TurnMenu
TurnMenu *-- "3"TurnOption
TurnView ..> PlayerViewPrototypeDirector
TurnView ..> PlayerViewPrototypeRegistry

PlayerView <|-- UserPlayerView
PlayerView <|-- MachinePlayerView
MachinePlayerView <|-- MinMaxMachinePlayerView
MachinePlayerView <|-- RandomMachinePlayerView

TurnOption <|-- SetRandomMachinePlayerOption
TurnOption <|-- SetMinMaxMachinePlayerOption
TurnOption <|-- SetUserPlayerOption
TurnMenu --> StartController

PlayerViewPrototypeDirector ..> PlayerViewPrototypeRegistry
PlayerViewPrototypeRegistry o-- PlayerView

class Option as "connect4.utils.menu.Option"
class SecuentialMenu as "connect4.utils.menu.SecuentialMenu"
class Coordinate as "connect4.Utils.Coordinate"
class Console as "connect4.utils.Console"
class Player as "connect4.connect4.\nmodels.Player"
enum PlayerType as "connect4.connect4.\ntypes.PlayerType"


Option <|-- TurnOption
SecuentialMenu <|-- TurnMenu
BoardView --> PlayController
BoardView ..> Coordinate
MachinePlayerView *-- Player
UserPlayerView *-- Player



PlayerViewPrototypeDirector ..> PlayerType


@enduml
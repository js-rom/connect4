@startuml connect4.connect4.controllers

class controllers.Logic {
    -controllers : Map<StateValue, Controller> 
    +Logic()
    +getController() : Controller
}

abstract class controllers.Controller {
    +Controller(Game, State)
    +nextState()
    + {abstract} accept(ControllerVisitor)
}

class controllers.Startcontroller {

    +getPlayerTypes() : PlayerType[]
    +getNumberPlayers() : int
    +reset()
    +isReset() : boolean
    +addPlayer(PlayerType)
    +getMinMaxMachinePlayerType() : PlayerType
    +getRandomMachinePlayerType() : PlayerType
    +getUserPlayerPlayerType() : PlayerType
}

interface controllers.ControllerVisitor {
    +start(Startcontroller)
    +play(PlayController)
    +resume(ResumeController)
}

class controllers.PlayController{
    +getActivePlayer() : Player
    +getActivePlayerType() : PlayerType
    +getColor(Coordinate) : Color
    +isFinished() : boolean
    +next()
    +dropToken(int)
    +getColumn() : int
    +isWinner() : boolean
}
class controllers.ResumeController{
    +isWinner() : boolean
    +reset()
}

class Game as "models.Game"
class State as "models.State"
class StateValue as "types.StateValue"



Controller ..> ControllerVisitor
Controller <|-- Startcontroller
Controller <|-- PlayController
Controller <|-- ResumeController

Logic *--> Game
Logic *--> State
Logic *--> Controller
Logic *--> StateValue

Controller --> Game
Controller --> State


@enduml
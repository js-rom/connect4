@startuml connect4.connect4.views.graphics
class graphics.GraphicsView {
    +setLatch(CountDownLatch)
}

class CountDownLatch as "java.util.\nconcurrent.\nCountDownLatch"
class graphics.MainFrame{
     +interact()
    +setPanel(GameLoopView)
    +write()
    +isResumed(ResumeController) : boolean
}
abstract class graphics.PanelView {
    + {abstract} write()
}
interface graphics.GameLoopView
class graphics.StartPanelView {
    +write()
    +addPlayers()
    +actionPerformed(ActionEvent)
}

class graphics.PlayPanelView{
    +write()
    -removeBoard()
    +visit(MachinePlayerBoardView)
    +visit(UserPlayerBoardView)
}
abstract class graphics.BoardView {
    + BoardView(PlayController, PanelViewCommand)
    + write()
    #  {abstract}  createSquare(Coordinate) : Square
    # getColors() : Map<Color, ImageIcon>
    # getNextTurnCommand() : PanelViewCommand
    # getPlayController() : PlayController
    +  {abstract}  accept(PlayPanelViewVisitor)
}
class graphics.BoardViewPrototypeDirector{
    +get(BoardViewPrototypeRegistry,\n PlayerType) : BoardView
}
class graphics.BoardViewPrototypeRegistry{
    -playerBoardViews : Map<PlayerType, BoardView> 
    -addPlayerview(PlayerType, BoardView)
    +getPlayerView(PlayerType) : BoardView
}
interface graphics.Command {
    +execute()
}
abstract class graphics.PanelViewCommand {
    +PanelViewCommand(PanelView)
    #getReceiver() : PanelView
}
class graphics.MachinePlayerBoardView {
    +dropToken()
    +accept(PlayPanelViewVisitor)
}
class graphics.UserPlayerBoardView{
    -actionPerformed(ActionEvent)
    +accept(PlayPanelViewVisitor)
}

class graphics.NextTurnCommand
abstract class graphics.Square
class graphics.ClickableSquare {
    + getColumn() : int
}
class graphics.NonClickableSquare {
    + actionPerformed(ActionEvent)
}
class graphics.TurnView{
    +write()
}
abstract class graphics.PanelView
class StartController as "controllers.\nStartController"
class PlayController as "controllers.\nPlayController"
class ResumeController as "controllers.\nResumeController"
class Coordinate as "utils.models.\nCoordinate"
interface View as "views.View"{
    +start(StartController)
    +play(PlayController)
    +resume(ResumeController)
}


GraphicsView --> CountDownLatch
class JFrame
JFrame <|-- MainFrame
GraphicsView *--> MainFrame


StartPanelView --> StartController
StartPanelView --> CountDownLatch
PlayPanelView --> PlayController
PlayPanelView --> CountDownLatch
BoardView --> PlayController
TurnView --> PlayController
MainFrame ..> ResumeController


View <|-- GraphicsView

class JOptionPane
MainFrame ..> JOptionPane

JPanel <|-- PanelView
PanelView <|-- GameLoopView
GameLoopView <|-- StartPanelView
GameLoopView <|-- PlayPanelView
PanelView <|-- BoardView
PanelView <|-- TurnView

GraphicsView ..> GameLoopView
MainFrame --> GameLoopView

PlayPanelView *--> BoardView
PlayPanelView *--> TurnView
PlayPanelView ..> BoardViewPrototypeRegistry
PlayPanelView ..> BoardViewPrototypeDirector
BoardViewPrototypeDirector --> BoardViewPrototypeRegistry
BoardViewPrototypeDirector ..> PlayerType
BoardViewPrototypeRegistry ..> PlayController
BoardViewPrototypeRegistry ..> Command
BoardViewPrototypeRegistry *--> "2"BoardView


PlayPanelView ..> Command

Command <|-- PanelViewCommand
PanelViewCommand <|-- NextTurnCommand


BoardView <|-- MachinePlayerBoardView
BoardView <|-- UserPlayerBoardView
MachinePlayerBoardView o--> NonClickableSquare
UserPlayerBoardView o--> ClickableSquare
Square <|-- ClickableSquare
Square <|-- NonClickableSquare
BoardView --> Command

Square --> Coordinate
@enduml